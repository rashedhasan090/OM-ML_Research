To show the properties of BCP in the CDCL SAT solving algorithm, let's analyze each statement:

BCP only introduces literals into the partial assignment that are implied by the existing assignments and the original set of clauses:
Proof:
When BCP propagates an assignment, it considers the watched literals in each clause. BCP ensures that the propagated assignment is consistent with the existing assignments and the original set of clauses. Here's a step-by-step explanation:

BCP propagates an assignment fv -> bg for variable v.
If b is true, BCP propagates the assignment through clauses where :v is watched. This implies that the literals in those clauses must be consistent with the assignment.
If b is false, BCP propagates the assignment through clauses where v is watched. Again, this implies that the literals in those clauses must be consistent with the assignment.
BCP only introduces literals that are implied by the propagated assignment and the original set of clauses. It does not introduce any new literals that are unrelated or contradictory to the existing assignments.
Therefore, BCP only introduces literals into the partial assignment that are implied by the existing assignments and the original set of clauses.

BCP does not change the set of satisfying assignments for the input set of clauses:
Proof:
To prove this, we need to show that if the original set of clauses is satisfiable before BCP, it remains satisfiable after BCP. Here's the explanation:

Suppose the original set of clauses is satisfiable.
BCP propagates assignments based on the watched literals and ensures consistency with the existing assignments.
BCP may introduce new assignments through propagation, but these assignments are implied by the existing assignments and the original set of clauses (as shown in the previous point).
Since the propagated assignments are consistent with the original set of clauses, the set of satisfying assignments remains the same.
Therefore, BCP does not change the set of satisfying assignments for the input set of clauses.

BCP ensures that the watched literals are both unassigned or contain the only unassigned literal in the clause, if any:
Proof:
When BCP propagates an assignment, it handles the watched literals in each clause to maintain consistency. Here's the explanation:

BCP propagates an assignment fv -> bg for variable v.
If b is true, BCP propagates the assignment through clauses where :v is watched. In this case, BCP ensures that the other watched literal (if present) is already falsified. Thus, the watched literals remain consistent and unassigned.
If b is false, BCP propagates the assignment through clauses where v is watched. Similarly, BCP ensures that the other watched literal (if present) is already falsified. Again, the watched literals remain consistent and unassigned.
If there is only one unassigned literal in the clause, BCP may pick it as a watched literal while propagating the assignment.
Therefore, BCP ensures that the watched literals are both unassigned or contains the only unassigned literal in the clause, if any.

By demonstrating the above properties, we establish the correctness of BCP in the CDCL SAT solving algorithm.
